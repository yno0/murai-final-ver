# MURAI Web Environment Variables Template (Single Service Deployment)
# Copy this file to .env and fill in your actual values

# ===========================================
# SINGLE SERVICE ENVIRONMENT VARIABLES
# ===========================================

# Node Environment
NODE_ENV=production

# Server Port (Render will set this automatically)
PORT=10000

# Database Configuration
# Get this from MongoDB Atlas: https://cloud.mongodb.com/
MONGODB_URI=mongodb+srv://username:password@cluster.mongodb.net/murai?retryWrites=true&w=majority

# JWT Secret (Generate a secure random string)
# You can use: node -e "console.log(require('crypto').randomBytes(64).toString('hex'))"
JWT_SECRET=your-super-secure-jwt-secret-here

# Session Secret (Generate a secure random string)
# You can use: node -e "console.log(require('crypto').randomBytes(64).toString('hex'))"
SESSION_SECRET=your-super-secure-session-secret-here

# Enable serving frontend from Express server
SERVE_FRONTEND=true

# ===========================================
# OPTIONAL ENVIRONMENT VARIABLES
# ===========================================

# Email Configuration (if using email features)
# EMAIL_HOST=smtp.gmail.com
# EMAIL_PORT=587
# EMAIL_USER=your-email@gmail.com
# EMAIL_PASS=your-app-password

# Google OAuth (if using Google authentication)
# GOOGLE_CLIENT_ID=your-google-client-id
# GOOGLE_CLIENT_SECRET=your-google-client-secret

# ===========================================
# DEPLOYMENT NOTES
# ===========================================

# 1. For Single Service Deployment in Render:
#    - Set NODE_ENV, MONGODB_URI, JWT_SECRET, SESSION_SECRET, SERVE_FRONTEND
#    - PORT is automatically set by Render
#    - No need for separate frontend/backend URLs!

# 2. Generate secure secrets using:
#    node -e "console.log(require('crypto').randomBytes(64).toString('hex'))"

# 3. MongoDB Atlas setup:
#    - Create a free cluster at https://cloud.mongodb.com/
#    - Create a database user
#    - Whitelist Render IPs or use 0.0.0.0/0
#    - Get connection string and replace username/password

# 4. Benefits of Single Service:
#    - Only one service to manage
#    - No CORS issues between frontend/backend
#    - Simpler deployment and configuration
#    - More cost-effective (uses only one free service)
